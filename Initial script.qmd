---
title: "Untitled"
format: html
editor: visual
---

```{r warning=FALSE, message=FALSE}
# Packages
library(readr)
library(tidyverse)
library(dplyr)
library(stringr)
library(RSelenium)
```

```{r warning=FALSE, message=FALSE}
# Loading data
X5201_data <- read_csv("~/Downloads/Data/Altmetric - Research Outputs - London School of Economics and Political Science - 2024-10-24.csv")
X5202_data <- read_csv("~/Downloads/Data/Altmetric - Research Outputs - London School of Economics and Political Science - 2024-10-24 (4).csv")
X5203_data <- read_csv("~/Downloads/Data/Altmetric - Research Outputs - London School of Economics and Political Science - 2024-10-24 (3).csv")
X5204_data <- read_csv("~/Downloads/Data/Altmetric - Research Outputs - London School of Economics and Political Science - 2024-10-24 (1).csv")
X5205_data <- read_csv("~/Downloads/Data/Altmetric - Research Outputs - London School of Economics and Political Science - 2024-10-24 (2).csv")

```

## Binding Dataframes

Because of the sheer number of academic articles, we've had to import them in five seperate files. We're going to bind these together into one big dataframe.

```{r}
altmetrics_data <- bind_rows(X5201_data, X5202_data, X5203_data, X5204_data, X5205_data)
```

There is some overlap between the datasets, so we'll remove duplicates.

```{r}
altmetrics_data <- distinct(altmetrics_data)
```

```{r}
names(altmetrics_data)
```

**What is included in this data:**

-   All article publications in the category 'psychology' listed on Dimensions.ai database.

**What isn't included:**

-   Books

-   Book chapters

-   Data sets

-   Clinical trial records

-   News stories

**What information do we get on each source**

-   Impact measure: altmetrics

    -   Overall altmetrics score

    -   News mentions

    -   Blog mentions

    -   Policy mentions

    -   Patent mentions

    -   X mentions

    -   Peer review mentions

    -   Weibo mentions

    -   Facebook mentions

    -   Wikipedia mentions

    -   Google+ mentions

    -   LinkedIn mentions

    -   Reddit mentions

    -   Pinterest mentions

    -   F1000 mentions

    -   Q&A mentions

    -   Video mentions

    -   Sllyabi mentions

    -   Number of mendeley readers

    -   Number of citations

-   Article title

-   Journal title

-   Open access status

-   Subject categories

-   Publication date

-   Publisher names

**What info do we not get on each source?**

-   Citation-based impact metrics other than the number of citations (e.g. RCR or CNCI).

-   Usage-based impact metrics (e.g. page views or downloads)

**How can we compensate for this?**

-   Altmetric explorer API

```{r}
top_1_percent_n <- ceiling(0.01 * nrow(altmetrics_data))

altmetrics_data_p <- altmetrics_data %>%
  arrange(desc(`Facebook mentions`)) %>%
  slice_head(n = top_1_percent_n)

altmetrics_data_p

```

```{r}
altmetrics_data <- altmetrics_data %>%
  # Step 1: First author's affiliation
  mutate(
    First_Affiliation = str_split(`Affiliations (GRID)`, ";") %>% 
      sapply(function(x) x[1]) 
  ) %>%
  # Step 2: Extract country from the first author's affiliation
  mutate(
    Country = str_extract(First_Affiliation, "\\(([^)]+)\\)|,\\s*(\\b[A-Za-z ]+\\b)$") %>%
      str_remove_all("[\\(\\)]") 
  )


altmetrics_data %>%
  select(First_Affiliation, Country) %>%
 head(100)
```

**Quantification of impact**

-   Policy mentions

-   Social media mentions (combined facebook, linkedin reddit, x)

-   News mentions

-   Patents

-   Citations

-   Altmetrics

```{r}

# Define the function to query ROR API
get_country_from_ror <- function(affiliation) {
  # Construct the API URL for the ROR API
  base_url <- "https://api.ror.org/organizations?query="
  response <- GET(URLencode(paste0(base_url, affiliation)))

  if (response$status_code == 200) {
    content_json <- content(response, "text", encoding = "UTF-8")
    results <- tryCatch(fromJSON(content_json)$items, error = function(e) NULL)
    
    if (!is.null(results) && length(results) > 0) {
      country_name <- tryCatch(results[[1]]$country$country_name, error = function(e) NA)
      return(country_name)
    }
  }
  
  return(NA)
}

altmetrics_data <- altmetrics_data %>%
  mutate(
    country = str_extract(
First_Affiliation, ",\\s*([A-Za-z ]+)$") %>%
      str_remove_all("[\\(\\)]"),
    
   
    country = ifelse(is.na(country), sapply(
First_Affiliation, get_country_from_ror), country)
  )

```
