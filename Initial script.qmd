---
title: "Untitled"
format: html
editor: visual
---

## Preliminaries: packages and data loading

### Packages

```{r include=FALSE}
library(readr)
library(tidyverse)
library(dplyr)
library(stringr)
library(RSelenium)
library(openalexR)
library(essurvey)
library(purrr)
library(progress)
library(furrr)
library(parallel)
library(future.apply)
library(httr)
library(jsonlite)
library(data.table)
library(DataExplorer)
library(Amelia)
```

### Data

```{r include=FALSE}
altmetrics_data <- read_csv("altmetrics_data.csv")
```

## Data Wrangling

### DOIs â€“\> correct format

```{r}
altmetrics_data$`Publication Date` <- as.Date(altmetrics_data$`Publication Date`, format = "%Y-%m-%d")
```

```{r}
# Function to convert DOIs to OpenAlex format
convert_doi_to_openalex <- function(doi) {
  return(paste0("https://doi.org/", doi))
}

# Apply the function to each DOI in altmetrics_data
altmetrics_data$DOI <- sapply(altmetrics_data$DOI, convert_doi_to_openalex)
```

### Only 2010 onwards

```{r}
altmetrics_data <- altmetrics_data %>%
  filter(`Publication Date` >= as.Date("2010-01-01"))
```

### Remove NA DOIs

```{r}
altmetrics_data <- altmetrics_data %>%
  filter(DOI != "https://doi.org/NA")
```

## Sampling For Testing

```{r}
set.seed(1)
sample_data <- altmetrics_data %>% sample_n(5000)

```

## Merging altmetrics and OpenAlex data

### Fetch

```{r}
fetch_openalex_data <- function(doi, email = "a.watt2@lse.ac.uk") {
  base_url <- "https://api.openalex.org/works"

  url <- paste0(base_url, "/", doi)
  res <- GET(url, 
             add_headers("User-Agent" = "R/OpenAlexExample",
                         "mailto" = email))

  if (status_code(res) == 200) {
    return(content(res, "parsed", type = "application/json"))
  } else if (status_code(res) == 404) {
    return(NULL) # Return NULL for 404 errors
  } else {
    stop("Failed to fetch data. Status code: ", status_code(res))
  }
}

# Function to reconstruct the abstract from the inverted index
reconstruct_abstract <- function(inverted_index) {
  if (is.null(inverted_index)) return(NA)

  term_positions <- unlist(inverted_index, use.names = TRUE)
  terms <- names(term_positions)
  positions <- as.numeric(term_positions)

  # Clean up terms by removing trailing single-digit numbers
  clean_terms <- gsub("(\\w+)[0-9]$", "\\1", terms)

  # Reconstruct abstract by sorting terms by their positions
  sorted_terms <- clean_terms[order(positions)]
  abstract <- paste(sorted_terms, collapse = " ")

  return(abstract)
}

# Function to extract relevant fields from OpenAlex data
extract_openalex_data <- function(x) {
  if (!is.list(x)) return(NULL)

  data <- data.frame(
    abstract = reconstruct_abstract(x$abstract_inverted_index),
    so = ifelse(!is.null(x$primary_location$source$display_name), 
                x$primary_location$source$display_name, NA),
    host_organization = ifelse(!is.null(x$primary_location$source$host_organization_name), 
                               x$primary_location$source$host_organization_name, NA),
    type = ifelse(!is.null(x$type), x$type, NA),
    is_retracted = ifelse(!is.null(x$is_retracted), x$is_retracted, NA),
    any_repository_has_fulltext = ifelse(!is.null(x$open_access$any_repository_has_fulltext), 
                                         x$open_access$any_repository_has_fulltext, NA),
    language = ifelse(!is.null(x$language), x$language, NA),
    publication_year = ifelse(!is.null(x$publication_year), x$publication_year, NA),
    is_oa = ifelse(!is.null(x$primary_location$is_oa), x$primary_location$is_oa, NA),
    type_crossref = ifelse(!is.null(x$type_crossref), x$type_crossref, NA),
    countries_distinct_count = ifelse(!is.null(x$countries_distinct_count), x$countries_distinct_count, NA),
    institutions_distinct_count = ifelse(!is.null(x$institutions_distinct_count), x$institutions_distinct_count, NA),
    has_fulltext = ifelse(!is.null(x$has_fulltext), x$has_fulltext, NA),
    cited_by_count = ifelse(!is.null(x$cited_by_count), x$cited_by_count, NA),
    primary_topic_display_name = ifelse(!is.null(x$primary_topic$display_name), 
                                       x$primary_topic$display_name, NA),
    referenced_works_count = ifelse(!is.null(x$referenced_works_count), x$referenced_works_count, NA),
    institution_country_code = ifelse(!is.null(x$authorships),
                                      paste(unique(unlist(lapply(x$authorships, function(author) {
                                        if (!is.null(author$institutions)) {
                                          lapply(author$institutions, function(inst) inst$country_code)
                                        }
                                      }))), collapse = "; "), NA),
    stringsAsFactors = FALSE
  )

  return(data)
}

# Progress bar wrapper
fetch_openalex_data_with_progress <- function(dois, email) {
  pb <- progress_bar$new(
    total = length(dois),
    format = "  Fetching [:bar] :percent (:current/:total) ETA: :eta",
    clear = FALSE, width = 60
  )

  fetched_data <- lapply(dois, function(doi) {
    pb$tick()
    fetch_openalex_data(doi, email = email)
  })

  fetched_data <- fetched_data[!sapply(fetched_data, is.null)] # Remove NULL entries
  return(fetched_data)
}

# Fetch data with progress
fetched_data <- fetch_openalex_data_with_progress(sample_data$DOI, email = "a.watt2@lse.ac.uk")

# Extract the relevant fields
extracted_data <- lapply(fetched_data, extract_openalex_data)

# Standardize column names
column_names <- c("abstract", "so", "host_organization", "type", "is_retracted", 
                  "any_repository_has_fulltext", "language", "publication_year", 
                  "is_oa", "type_crossref", "countries_distinct_count", 
                  "institutions_distinct_count", "has_fulltext", 
                  "cited_by_count", "primary_topic_display_name", "referenced_works_count", "institution_country_code")

# Ensure all data frames have the same columns
extracted_data <- lapply(extracted_data, function(df) {
  missing_cols <- setdiff(column_names, names(df))
  df[missing_cols] <- NA
  df <- df[column_names]
  return(df)
})


# Ensure the fetched data aligns with sample_data
fetched_data_df <- do.call(rbind, extracted_data)

# Add DOI column to fetched_data_df for merging
fetched_data_df$DOI <- sample_data$DOI[1:nrow(fetched_data_df)]

# Perform a merge on the DOI column to ensure proper alignment
merged_data <- merge(sample_data, fetched_data_df, by = "DOI", all.x = TRUE)


```

### Clean

```{r}
merged_data_clean <- merged_data %>% 
  select(
#Basic info
    `Title`,
    `abstract`,
    `publication_year`,
    `type`, #article, pre-print, paratext, letter, editorial, erratum (corrections), libguides,             supplementary-materials, review (any article that comes from a journal that                    exclusively publishes review papers).
    `primary_topic_display_name`, # Primary topic
    
#Ownership
    `Journal/Collection Title`,
    `Publisher Names`,
    `Funder`, # Will probably have too high missingness to be useful

# Location
    `language`, #Language paper is originally written in
    `institution_country_code`, #For all authors in order from first to last, the countries                                    that the insitutions they are affiliated with are in
    `countries_distinct_count`, # Number of distinct countries in the above
    `institutions_distinct_count`, #Number of distinct institutions of authors

# Open access
    `is_oa`, # Is open access

# Non-social-media-impact metrics
    `News mentions`,
    `Policy mentions`,
    `cited_by_count`,
# Social media impact metrics
    `X mentions`,
    `Facebook mentions`,
    `Video mentions`,
    `Reddit mentions`,
    `Altmetric Attention Score`,
# Other
    `is_retracted`)

rownames(merged_data_clean) <- NULL
```

### Create social media score

```{r}
merged_data_clean$social_media_mentions <- merged_data_clean$`Facebook mentions` + merged_data_clean$`X mentions` + merged_data_clean$`Video mentions` + merged_data_clean$`Reddit mentions`

```

### View Data

```{r}
merged_data_clean
```

### Missing Data

```{r}
plot_missing(merged_data_clean)

missmap(merged_data_clean, col=c("red", "lightgrey"))
```
